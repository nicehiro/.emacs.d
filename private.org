#+title: Private

Private configuration.

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
#+end_src

* Specific system settings

#+begin_src emacs-lisp
  (defconst *is-a-mac* (eq system-type 'darwin))
  (defconst *is-a-linux* (eq system-type 'gnu/linux))
  (defconst *is-a-win* (eq system-type 'window-nt))

  (when *is-a-mac*
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none))
#+end_src

* Fonts

** Modern

#+begin_src emacs-lisp
  (setq meomacs-font-pixelsize 16)
#+end_src

#+tblname: fonts
| key    | font             | description                         |
|--------+------------------+-------------------------------------|
| mono   | Maple Mono NF    | monospace font for ascii characters |
| sans   | Maple Mono NF    | sans font for ascii characters      |
| serif  | Maple Mono NF    | serif font for ascii characters     |
| cjk    | Maple Mono NF CN | default font for cjk characters     |
| symbol | Maple Mono NF    | default font for unicode symbols    |

** COMMENT Pixel

#+begin_src emacs-lisp
  (setq meomacs-font-pixelsize 16)
#+end_src

#+tblname: fonts
| key    | font          | description                         |
|--------+---------------+-------------------------------------|
| mono   | Unifont       | monospace font for ascii characters |
| sans   | Unifont       | sans font for ascii characters      |
| serif  | Unifont       | serif font for ascii characters     |
| cjk    | Unifont       | default font for cjk characters     |
| symbol | Unifont Upper | default font for unicode symbols    |

* Pass table

#+tblname: var-table
| Variable      | Entry in passs | Description                |
|---------------+----------------+----------------------------|
| gptel-api-key | chatgpt_key    | The key for openai ChatGPT |

* hledger

#+begin_src emacs-lisp
  (straight-use-package 'hledger-mode)

  (use-package hledger-mode
    :after htmlize
    :mode ("\\.journal\\'" "\\.hledger\\'")
    :commands hledger-enable-reporting
    :preface
    (defun hledger/next-entry ()
      "Move to next entry and pulse."
      (interactive)
      (hledger-next-or-new-entry)
      (hledger-pulse-momentary-current-entry))

    (defun hledger/prev-entry ()
      "Move to last entry and pulse."
      (interactive)
      (hledger-backward-entry)
      (hledger-pulse-momentary-current-entry))

    :bind (("C-c j" . hledger-run-command)
           :map hledger-mode-map
           ("C-c e" . hledger-jentry)
           ("M-p" . hledger/prev-entry)
           ("M-n" . hledger/next-entry))
    :init
    (setq hledger-jfile
          (expand-file-name "~/Documents/hledger.journal"))
    ;; Expanded account balances in the overall monthly report are
    ;; mostly noise for me and do not convey any meaningful information.
    (setq hledger-show-expanded-report nil)

    (when (boundp 'my-hledger-service-fetch-url)
      (setq hledger-service-fetch-url
            my-hledger-service-fetch-url))

    :config
    (setq hledger-currency-string "RMB")
    (add-hook 'hledger-view-mode-hook #'hl-line-mode)
    (add-hook 'hledger-view-mode-hook #'center-text-for-reading)

    (add-hook 'hledger-view-mode-hook
              (lambda ()
                (run-with-timer 1
                                nil
                                (lambda ()
                                  (when (equal hledger-last-run-command
                                               "balancesheet")
                                    ;; highlight frequently changing accounts
                                    (highlight-regexp "^.*\\(savings\\|cash\\).*$")
                                    (highlight-regexp "^.*credit-card.*$"
                                                      'hledger-warning-face))))))

    (add-hook 'hledger-mode-hook
              (lambda ()
                (make-local-variable 'company-backends)
                (add-to-list 'company-backends 'hledger-company))))

  (use-package hledger-input
    ;; :load-path "straight/build/hledger-mode/"
    :bind (("C-c e" . hledger-capture)
           :map hledger-input-mode-map
           ("C-c C-b" . popup-balance-at-point))
    :preface
    (defun popup-balance-at-point ()
      "Show balance for account at point in a popup."
      (interactive)
      (if-let ((account (thing-at-point 'hledger-account)))
          (message (hledger-shell-command-to-string (format " balance -N %s "
                                                            account)))
        (message "No account at point")))

    :config
    (setq hledger-input-buffer-height 20)
    (add-hook 'hledger-input-post-commit-hook #'hledger-show-new-balances)
    (add-hook 'hledger-input-mode-hook #'auto-fill-mode)
    (add-hook 'hledger-input-mode-hook
              (lambda ()
                (make-local-variable 'company-idle-delay)
                (setq-local company-idle-delay 0.1))))
#+end_src

* Claude code

#+begin_src emacs-lisp
  (straight-use-package '(claude-code
                          :host github
                          :repo "stevemolitor/claude-code.el"
                          :branch "main"
                          :files ("*.el" (:exclude "images/*"))))

  (straight-use-package 'vterm)

  (use-package claude-code
    :bind-keymap
    ("C-c t" . claude-code-command-map)
    :config
    (claude-code-mode)

    (defun hiro/claude-notify (title message)
    "Display a macOS notification with sound."
      (call-process "osascript" nil nil nil
                  "-e" (format
                        "display notification \"%s\" with title \"%s\" sound name \"Glass\""
                        message title)))
    (setq claude-code-notification-function 'hiro/claude-notify)

    (add-to-list 'display-buffer-alist
               '("\\*claude.*\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (window-width . 60)
                 (window-parameters . ((no-delete-other-windows . t)))))

    (setq claude-code-terminal-backend 'vterm)
    ;; Increase vterm scrollback to 100000 lines (the maximum allowed)
    ;; Note: This increases memory usage
    (add-hook 'claude-code-start-hook
            (lambda ()
              ;; Only increase scrollback for vterm backend
              (when (eq claude-code-terminal-backend 'vterm)
                (setq-local vterm-max-scrollback 100000))))
    ;; Allow vterm windows to be as narrow as 40 columns
    (setopt vterm-min-window-width 40))
#+end_src
