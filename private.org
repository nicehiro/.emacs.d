#+title: Private

Private configuration.

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
#+end_src

* Specific system settings

#+begin_src emacs-lisp
  (defconst *is-a-mac* (eq system-type 'darwin))
  (defconst *is-a-linux* (eq system-type 'gnu/linux))
  (defconst *is-a-win* (eq system-type 'window-nt))

  (when *is-a-mac*
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none))
#+end_src

* Fonts

** Modern

#+begin_src emacs-lisp
  (setq meomacs-font-pixelsize 16)
#+end_src

#+tblname: fonts
| key    | font             | description                         |
|--------+------------------+-------------------------------------|
| mono   | Maple Mono NF    | monospace font for ascii characters |
| sans   | Maple Mono NF    | sans font for ascii characters      |
| serif  | Maple Mono NF    | serif font for ascii characters     |
| cjk    | Maple Mono NF CN | default font for cjk characters     |
| symbol | Maple Mono NF    | default font for unicode symbols    |

** COMMENT Pixel

#+begin_src emacs-lisp
  (setq meomacs-font-pixelsize 16)
#+end_src

#+tblname: fonts
| key    | font          | description                         |
|--------+---------------+-------------------------------------|
| mono   | Unifont       | monospace font for ascii characters |
| sans   | Unifont       | sans font for ascii characters      |
| serif  | Unifont       | serif font for ascii characters     |
| cjk    | Unifont       | default font for cjk characters     |
| symbol | Unifont Upper | default font for unicode symbols    |

* Themes

#+begin_src emacs-lisp
    (straight-use-package 'ef-themes)

    (setq ef-themes-headings ; read the manual's entry or the doc string
          '((0 . (variable-pitch light 1.9))
            (1 . (variable-pitch light 1.8))
            (2 . (variable-pitch regular 1.7))
            (3 . (variable-pitch regular 1.6))
            (4 . (variable-pitch regular 1.5))
            (5 . (variable-pitch 1.4)) ; absence of weight means `bold'
            (6 . (variable-pitch 1.3))
            (7 . (variable-pitch 1.2))
            (t . (variable-pitch 1.1))))

    (setq ef-themes-mixed-fonts t
          ef-themes-variable-pitch-ui t)

    (setq ef-themes-region '(intense no-extend neutral))

    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)
#+end_src

* Pass table

#+tblname: var-table
| Variable      | Entry in passs | Description                |
|---------------+----------------+----------------------------|
| gptel-api-key | chatgpt_key    | The key for openai ChatGPT |

* hledger

#+begin_src emacs-lisp
  (straight-use-package 'hledger-mode)

  (use-package hledger-mode
    :after htmlize
    :mode ("\\.journal\\'" "\\.hledger\\'")
    :commands hledger-enable-reporting
    :preface
    (defun hledger/next-entry ()
      "Move to next entry and pulse."
      (interactive)
      (hledger-next-or-new-entry)
      (hledger-pulse-momentary-current-entry))

    (defun hledger/prev-entry ()
      "Move to last entry and pulse."
      (interactive)
      (hledger-backward-entry)
      (hledger-pulse-momentary-current-entry))

    :bind (("C-c j" . hledger-run-command)
           :map hledger-mode-map
           ("C-c e" . hledger-jentry)
           ("M-p" . hledger/prev-entry)
           ("M-n" . hledger/next-entry))
    :init
    (setq hledger-jfile
          (expand-file-name "~/Documents/hledger.journal"))
    ;; Expanded account balances in the overall monthly report are
    ;; mostly noise for me and do not convey any meaningful information.
    (setq hledger-show-expanded-report nil)

    (when (boundp 'my-hledger-service-fetch-url)
      (setq hledger-service-fetch-url
            my-hledger-service-fetch-url))

    :config
    (setq hledger-currency-string "RMB")
    (add-hook 'hledger-view-mode-hook #'hl-line-mode)
    (add-hook 'hledger-view-mode-hook #'center-text-for-reading)

    (add-hook 'hledger-view-mode-hook
              (lambda ()
                (run-with-timer 1
                                nil
                                (lambda ()
                                  (when (equal hledger-last-run-command
                                               "balancesheet")
                                    ;; highlight frequently changing accounts
                                    (highlight-regexp "^.*\\(savings\\|cash\\).*$")
                                    (highlight-regexp "^.*credit-card.*$"
                                                      'hledger-warning-face))))))

    (add-hook 'hledger-mode-hook
              (lambda ()
                (make-local-variable 'company-backends)
                (add-to-list 'company-backends 'hledger-company))))

  (use-package hledger-input
    ;; :load-path "straight/build/hledger-mode/"
    :bind (("C-c e" . hledger-capture)
           :map hledger-input-mode-map
           ("C-c C-b" . popup-balance-at-point))
    :preface
    (defun popup-balance-at-point ()
      "Show balance for account at point in a popup."
      (interactive)
      (if-let ((account (thing-at-point 'hledger-account)))
          (message (hledger-shell-command-to-string (format " balance -N %s "
                                                            account)))
        (message "No account at point")))

    :config
    (setq hledger-input-buffer-height 20)
    (add-hook 'hledger-input-post-commit-hook #'hledger-show-new-balances)
    (add-hook 'hledger-input-mode-hook #'auto-fill-mode)
    (add-hook 'hledger-input-mode-hook
              (lambda ()
                (make-local-variable 'company-idle-delay)
                (setq-local company-idle-delay 0.1))))
#+end_src
