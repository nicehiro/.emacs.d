#+title: Research

Configuration for doing research with Emacs.

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
#+end_src

* Citation Management

I use Zotero for downloading, quick noting and sharing (sometimes) papers. For long notes, I use Org-Roam to write and Citar for manage them in Emacs. The Zotero and Citar are connected by using Better-BibTeX.

** Zotero auto export bibs

Use Zotero to manage all papers in different platform as a graphic interface, and better-bibtex to automatic output all bibs.

** Citar to manage bibs in Emacs

Create or open notes in Org-Roam for all bibs.

#+begin_src emacs-lisp
  ;; Ensure :zotero: links are redirected to org-mode
  (use-package org
    :custom
    (org-link-set-parameters "zotero" :follow
                             (lambda (zpath)
                               (browse-url
                                (format "zotero:%s" zpath)))))

  (use-package oc
    :custom
    (setq org-cite-global-bibliography '("~/Documents/roam/library.bib")))

  ;; Use `citar' with `org-cite'
  (straight-use-package 'citar)
  (use-package citar
    :after oc
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography '("~/Documents/roam/library.bib"))
    (citar-org-roam-note-title-template "${author} - ${title}\npdf: ${file}")
    (add-to-list 'citar-file-open-functions '("pdf" . citar-file-open-external))
    :bind
    (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

  (straight-use-package 'citar-org-roam)
  (use-package citar-org-roam
    :after (citar org-roam)
    :config (citar-org-roam-mode))

  (use-package org-roam
    :config
    (setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :target
           (file+head
            "%<%Y%m%d%H%M%S>-${slug}.org"
            "#+title: ${note-title}\n")
           :unnarrowed t)
          ("n" "literature note" plain
           "%?"
           :target
           (file+head
            "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
            "#+title: ${citar-citekey} (${citar-date}). ${note-title}.\n#+created: %U\n#+last_modified: %U\n\n")
           :unnarrowed t))))
#+end_src

* LaTeX

#+begin_src emacs-lisp

  (straight-use-package 'auctex)
  (straight-use-package 'cdlatex)
  (straight-use-package 'reftex)

  (use-package latex
    :ensure auctex
    ;; :hook ((LaTeX-mode . prettify-symbols-mode))
    :bind (:map LaTeX-mode-map
                ("C-S-e" . latex-math-from-calc))
    :hook ((LaTeX-mode . visual-line-mode))
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    ;; Format math as a Latex string with Calc
    (defun latex-math-from-calc ()
      "Evaluate `calc' on the contents of line at point."
      (interactive)
      (cond ((region-active-p)
             (let* ((beg (region-beginning))
                    (end (region-end))
                    (string (buffer-substring-no-properties beg end)))
               (kill-region beg end)
               (insert (calc-eval `(,string calc-language latex
                                            calc-prefer-frac t
                                            calc-angle-mode rad)))))
            (t (let ((l (thing-at-point 'line)))
                 (end-of-line 1) (kill-line 0)
                 (insert (calc-eval `(,l
                                      calc-language latex
                                      calc-prefer-frac t
                                      calc-angle-mode rad))))))))

  (use-package preview
    :after latex
    :hook ((LaTeX-mode . preview-larger-previews))
    :config
    (defun preview-larger-previews ()
      (setq preview-scale-function
            (lambda () (* 1.0
                          (funcall (preview-scale-from-face)))))))

  (use-package cdlatex
    :ensure t
    :hook (LaTeX-mode . turn-on-cdlatex)
    :bind (:map cdlatex-mode-map
                ("<tab>" . cdlatex-tab)))

  (use-package yasnippet
    :hook ((LaTeX-mode . yas-minor-mode)
           (post-self-insert . my/yas-try-expanding-auto-snippets))
    :config
    (use-package warnings
      :config
      (cl-pushnew '(yasnippet backquote-change)
                  warning-suppress-types
                  :test 'equal))

    (setq yas-triggers-in-field t)

    ;; Function that tries to autoexpand YaSnippets
    ;; The double quoting is NOT a typo!
    (defun my/yas-try-expanding-auto-snippets ()
      (when (and (boundp 'yas-minor-mode) yas-minor-mode)
        (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
          (yas-expand)))))

  ;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
  ;; fields
  (use-package cdlatex
    :hook ((cdlatex-tab . yas-expand)
           (cdlatex-tab . cdlatex-in-yas-field))
    :config
    (use-package yasnippet
      :bind (:map yas-keymap
                  ("<tab>" . yas-next-field-or-cdlatex)
                  ("TAB" . yas-next-field-or-cdlatex))
      :config
      (defun cdlatex-in-yas-field ()
        ;; Check if we're at the end of the Yas field
        (when-let* ((_ (overlayp yas--active-field-overlay))
                    (end (overlay-end yas--active-field-overlay)))
          (if (>= (point) end)
              ;; Call yas-next-field if cdlatex can't expand here
              (let ((s (thing-at-point 'sexp)))
                (unless (and s (assoc (substring-no-properties s)
                                      cdlatex-command-alist-comb))
                  (yas-next-field-or-maybe-expand)
                  t))
            ;; otherwise expand and jump to the correct location
            (let (cdlatex-tab-hook minp)
              (setq minp
                    (min (save-excursion (cdlatex-tab)
                                         (point))
                         (overlay-end yas--active-field-overlay)))
              (goto-char minp) t))))

      (defun yas-next-field-or-cdlatex nil
        (interactive)
        "Jump to the next Yas field correctly with cdlatex active."
        (if
            (or (bound-and-true-p cdlatex-mode)
                (bound-and-true-p org-cdlatex-mode))
            (cdlatex-tab)
          (yas-next-field-or-maybe-expand)))))

  (use-package reftex
    :after latex
    :defer 2
    :commands turn-on-reftex
    :hook ((latex-mode LaTeX-mode) . turn-on-reftex)
    :config
    (setq reftex-default-bibliography '("~/Documents/Projects/vaesi_paper/main.bib"))
    (setq reftex-insert-label-flags '("sf" "sfte"))
    (setq reftex-plug-into-AUCTeX t)
    (setq reftex-ref-style-default-list '("Default" "AMSMath" "Cleveref"))
    (setq reftex-use-multiple-selection-buffers t))

  (use-package consult-reftex
    ;; :load-path "plugins/consult-reftex/"
    :after (reftex consult embark)
    :bind (:map reftex-mode-map
                ("C-c )"   . consult-reftex-insert-reference)
                ("C-c M-." . consult-reftex-goto-label)
                :map org-mode-map
                ("C-c (" . consult-reftex-goto-label)
                ("C-c )"   . consult-reftex-insert-reference))
    :config
    (setq consult-reftex-preview-function
          #'consult-reftex-make-window-preview
          consult-reftex-preferred-style-order
          '("\\eqref" "\\ref"))
    (consult-customize consult-reftex-insert-reference
                       :preview-key (list :debounce 0.3 'any)))
#+end_src

* Elfeed

#+begin_src emacs-lisp
  (straight-use-package 'elfeed)
  (straight-use-package 'elfeed-protocol)
  (straight-use-package 'elfeed-score)

  (use-package elfeed
    :config
    (setq-default elfeed-search-filter "@1-years-old +unread")
    (defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread)))

  (use-package elfeed-protocol
    :config
    (setq elfeed-use-curl t)
    (elfeed-set-timeout 36000)
    (setq elfeed-curl-extra-arguments '("--insecure"))
    (setq elfeed-protocol-fever-fetch-category-as-tag t)

    (defun hiro/get-fever-pwd ()
      (replace-regexp-in-string "[[:space:]\n]+"
                                ""
                                (with-temp-buffer
                                  (insert-file-contents "~/Documents/keys/fever/pwd.txt")
                                  (buffer-string))))

    (setq elfeed-protocol-feeds `(("fever+https://fy@freshrss.nicehiro.xyz"
                                   :api-url "https://freshrss.nicehiro.xyz/api/fever.php"
                                   :password ,(hiro/get-fever-pwd))))
    (setq elfeed-protocol-enabled-protocols '(fever))
    (elfeed-protocol-enable))

  (use-package elfeed-score
    :config
    (elfeed-score-enable)
    (define-key elfeed-search-mode-map "=" elfeed-score-map)
    (elfeed-score-serde-load-score-file "~/.config/emacs/elfeed.score")

    (setq elfeed-search-print-entry-function #'elfeed-score-print-entry)
    )
#+end_src
