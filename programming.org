#+title: Programming

Configuration for programming and languages support.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+end_src

* Hideshow

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src

* Eldoc

** COMMENT Display in childframe

#+begin_src emacs-lisp
  (straight-use-package 'eldoc-box)
#+end_src

** COMMENT Replace the default C-h .

#+begin_src emacs-lisp
  (keymap-set global-map "C-h ."  'eldoc-box-help-at-point)
#+end_src

* COMMENT Topsy

Show current function signature in header line.

#+begin_src emacs-lisp
  (straight-use-package
   '(topsy :host github :repo "alphapapa/topsy.el"))

  (autoload 'topsy-mode "topsy" nil t)
#+end_src

* Code Formatter

#+begin_src emacs-lisp
  (straight-use-package 'format-all)

  (keymap-set prog-mode-map "C-c f" 'format-all-buffer)
#+end_src

* Force save file
#+begin_src emacs-lisp
  (defun meomacs-save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (global-set-key (kbd "C-c w") 'meomacs-save-buffer-always)
#+end_src

* COMMENT Flycheck

#+begin_src emacs-lisp
  (straight-use-package 'flycheck)

  (setq flycheck-check-syntax-automatically '(save idle-buffer-switch mode-enabled))
#+end_src

* Lisp Parenthese

** COMMENT Combobulate

#+begin_src emacs-lisp
  (straight-use-package 'combobulate)

  (add-hook 'prog-mode-hook 'combobulate-mode)
#+end_src

** COMMENT Puni

#+begin_src emacs-lisp
  (straight-use-package 'puni)

  (add-hook 'prog-mode-hook 'puni-mode)
#+end_src

** COMMENT Paredit
#+begin_src emacs-lisp
  (straight-use-package 'paredit)

  (require 'paredit)

  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
#+end_src

** Eglot

Use eglot as LSP client.

#+begin_src emacs-lisp
  (autoload 'eglot "eglot" nil t)

  (setq eglot-ignored-server-capabilities
        '(:documentHighlightProvider
          :inlayHintProvider
          :workspaceSymbolProvider
          :documentSymbolProvider
          :codeLensProvider))

  (setq eglot-autoshutdown t)

  (setq eglot-stay-out-of '(yasnippet))

  (setq eglot-send-changes-idle-time 0)

  (defun eglot-setup-eldoc ()
    (setq-local eldoc-documentation-functions '(flymake-eldoc-function
                                                eglot-signature-eldoc-function
                                                eglot-hover-eldoc-function)))

  (add-hook 'eglot-mode-hook 'eglot-setup-eldoc)

  (with-eval-after-load "eglot"
    (define-key eglot-mode-map (kbd "<C-return>") 'eglot-code-actions))
#+end_src

*** Turn off event logs

#+begin_src emacs-lisp
  (with-eval-after-load "eglot"
    (setq eglot-events-buffer-config '(:size 0 :format full))
    (setq eglot-events-buffer-size 0))

  (with-eval-after-load "jsonrpc"
    (fset #'jsonrpc--log-event #'ignore)
    (setq jsonrpc-event-hook nil))
#+end_src

*** Use lsp-booster

#+begin_src emacs-lisp
  (straight-use-package
   '(eglot-booster :host github
                   :repo "jdtsmith/eglot-booster"))

  (setq eglot-booster-io-only t)

  (add-hook 'eglot-mode-hook 'eglot-booster-mode)
#+end_src

*** Configuration

#+begin_src emacs-lisp
  (setq-default eglot-workspace-configuration
                '(:rust-analyzer (:hover (:memoryLayout (:enable :json-false)))))
#+end_src

*** Flymake

#+begin_src emacs-lisp
  (setq flymake-no-changes-timeout 0.5)

  (with-eval-after-load "flymake"
    (keymap-set flymake-mode-map "C-c k k" 'flymake-show-buffer-diagnostics)
    (keymap-set flymake-mode-map "C-c k a" 'flymake-show-project-diagnostics)
    (keymap-set flymake-mode-map "C-c k n" 'flymake-goto-next-error)
    (keymap-set flymake-mode-map "C-c k p" 'flymake-goto-prev-error))
#+end_src

* Lua
#+begin_src emacs-lisp
  (straight-use-package 'lua-mode)
#+end_src

* Nix

#+begin_src emacs-lisp
  (straight-use-package 'nix-mode)

  (autoload 'nix-mode "nix-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+end_src

** nixpkgs-fmt
#+begin_src emacs-lisp
  (straight-use-package 'nixpkgs-fmt)

  (with-eval-after-load "nixpkgs-fmt"
    (define-key nix-mode-map (kbd "C-c C-f") 'nixpkgs-fmt)
    (add-hook 'nix-mode-hook 'nixpkgs-fmt-on-save-mode))
#+end_src

* HTML
#+begin_src emacs-lisp
  (straight-use-package 'web-mode)
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2)

  (add-to-list 'auto-mode-alist
               '("\\.html\\'" . web-mode))
#+end_src

#+begin_src emacs-lisp
  (setq-default css-indent-offset 2
                js-indent-level 2)
#+end_src

** Emmet
#+begin_src emacs-lisp
  (straight-use-package 'emmet-mode)

  (autoload 'emmet-expand-line "emmet-mode" nil t)

  (with-eval-after-load "mhtml-mode"
    (define-key mhtml-mode-map (kbd "M-RET") 'emmet-expand-line))

  (with-eval-after-load "svelte-mode"
    (define-key svelte-mode-map (kbd "M-RET") 'emmet-expand-line))
#+end_src

* Just

** Just-mode
#+begin_src emacs-lisp
  (straight-use-package 'just-mode)

  (autoload 'just-mode "just-mode" nil t)

  (add-to-list 'auto-mode-alist '("/[Jj]ustfile\\'" . just-mode))
  (add-to-list 'auto-mode-alist '("\\.[Jj]ust\\(file\\)?\\'" . just-mode))

  (defun +just-mode-hook ()
    (modify-syntax-entry ?- "_"))

  (add-hook 'just-mode-hook '+just-mode-hook)
#+end_src

* YAML
#+begin_src emacs-lisp
  (straight-use-package 'yaml-mode)

  (autoload 'yaml-mode "yaml-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode))
  (add-to-list 'magic-mode-alist '("^%YAML\\s-+[0-9]+\\.[0-9]+\\(\\s-+#\\|\\s-*$\\)" . yaml-mode))
#+end_src

* Xref configuration

#+begin_src emacs-lisp
  (setq xref-show-definitions-function 'xref-show-definitions-completing-read)
#+end_src
