#+title: Editor Basics

Configuration for editor basics.

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
#+end_src

* Package management                                               :required:

** Straight

Straight.el is used for package management.

*** Disable startup check

#+begin_src emacs-lisp
  (setq straight-check-for-modifications '(check-on-save))
#+end_src

*** Disable native compilation

#+begin_src emacs-lisp
  (setq straight-disable-native-compile t)
#+end_src

*** Key bindings

#+tblname: straight-keymap-table
| Key | Command                  |
|-----+--------------------------|
| c   | straight-check-package   |
| C   | straight-check-all       |
| p   | straight-pull-package    |
| P   | straight-pull-all        |
| b   | straight-rebuild-package |
| B   | straight-rebuild-all     |
| v   | straight-freeze-versions |

#+header: :var straight-keymap-table=straight-keymap-table
#+begin_src emacs-lisp
  (meomacs-keymap-table straight-keymap straight-keymap-table)
  (global-set-key (kbd "C-c S") 'straight-keymap)
#+end_src

* Exec from shell

#+begin_src emacs-lisp
  (straight-use-package 'exec-path-from-shell)
  (when *is-a-mac*
    (exec-path-from-shell-initialize))
#+end_src

* Better defaults

#+begin_src emacs-lisp
  (setq-default

   inhibit-startup-screen t
   ;; Don't display comp warnings
   warning-suppress-log-types '((comp))
   ;; Don't create lockfiles
   create-lockfiles nil

   ;; prefer UTF8
   buffer-file-coding-system 'utf-8-unix
   default-file-name-coding-system 'utf-8-unix
   default-keyboard-coding-system 'utf-8-unix
   default-process-coding-system '(utf-8-unix . utf-8-unix)
   default-sendmail-coding-system 'utf-8-unix
   default-terminal-coding-system 'utf-8-unix

   ;; Add newline at bottom of file
   require-final-newline t

   ;; Backup setups
   ;; We use temporary directory /tmp for backup files
   ;; More versions should be saved
   backup-directory-alist `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t

   ;; Skip prompt for xref find definition
   xref-prompt-for-identifier nil

   ;; Don't wait for keystrokes display
   echo-keystrokes 0.01

   ;; Disable margin for overline and underline
   overline-margin 0
   underline-minimum-offset 0

   ;; Allow resizing frame by pixels
   frame-resize-pixelwise t

   ;; Better scroll behavior
   mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))
   mouse-wheel-progressive-speed nil

   ;; Disable copy region blink
   copy-region-blink-delay 0

   ;; Use short answer when asking yes or no
   read-answer-short t

   ;; Always follow link
   vc-follow-symlinks t

   ;; Use custom.el as custom file
   custom-file (expand-file-name "custom.el" user-emacs-directory)

   ;; Disable ring bell
   ring-bell-function 'ignore

   ;; Mouse yank at current point
   mouse-yank-at-point t

   ;; DWIM target for dired
   ;; Automatically use another dired buffer as target for copy/rename
   dired-dwim-target t

   ;; Use spaces instead of tab
   indent-tabs-mode nil

   ;; Don't echo multiline eldoc
   eldoc-echo-area-use-multiline-p nil

   ;; No cursor blink in TUI
   visible-cursor nil

   ;; Counter for isearch
   isearch-lazy-count t
   isearch-lazy-highlight t

   compilation-scroll-output 'first-error

   ;; Flatten imenu for easy searching
   imenu-flatten t

   ;; For scrolling performance
   fast-but-imprecise-scrolling t
   inhibit-compacting-font-caches t
   auto-window-vscroll nil)

  (scroll-bar-mode -1)

  (global-subword-mode 1)
  (diminish 'subword-mode)

  (setq blink-cursor-interval 0.1
        blink-cursor-delay 0.2
        blink-cursor-blinks 30)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (setq jit-lock-defer-time 0)

  (global-auto-revert-mode 1)
  (setq auto-revert-use-notify nil)
#+end_src

* Evil

#+begin_src emacs-lisp
  (straight-use-package 'evil)
  (evil-mode 1)
  (evil-set-initial-state 'ledger-report-mode 'emacs)
  (evil-set-initial-state 'special-mode 'emacs)
  (evil-set-initial-state 'info-mode 'emacs)
  ;; (evil-set-initial-state 'corfu-mode 'emacs)
  (evil-set-initial-state 'dired-mode 'emacs)
  (evil-set-initial-state 'pass-mode 'emacs)
  (evil-set-initial-state 'elfeed-search-mode 'emacs)
  (evil-set-initial-state 'elfeed-show-mode 'emacs)
  (evil-set-initial-state 'telega-root-mode 'emacs)
  (evil-set-initial-state 'telega-chat-mode 'emacs)
  (evil-set-initial-state 'gptel-mode 'emacs)
  (evil-set-initial-state 'vterm-mode 'emacs)
  (setq evil-default-state 'normal)
  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "C-n") nil)
    (define-key evil-normal-state-map (kbd "C-p") nil))
  (with-eval-after-load 'evil-maps
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (setq evil-mode-line-format nil)
  (setq evil-default-cursor t)

  (straight-use-package 'evil-surround)
  (global-evil-surround-mode 1)
#+end_src

* Start a emacs server

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-mode 1))
#+end_src

* COMMENT Window management

Switch window by pressing the number showned in the mode line.

#+begin_src emacs-lisp
  (straight-use-package '(window-numbering
                          :repo "DogLooksGood/window-numbering.el"
                          :host github
                          :type git))

  (require 'window-numbering)
  (window-numbering-mode 1)

  (defun meomacs-window-numbering-modeline ()
    (concat " "
            (let ((n (window-numbering-get-number)))
              (when (numberp n)
                (if window-system
                    (alist-get
                     n
                     '((0 . "0")
                       (1 . "1")
                       (2 . "2")
                       (3 . "3")
                       (4 . "4")
                       (5 . "5")
                       (6 . "6")
                       (7 . "7")
                       (8 . "8")
                       (9 . "9")))
                  (concat "[" (number-to-string n) "] "))))))

  (setq window-numbering-assign-func
        (lambda ()
          (when (string-prefix-p " *Treemacs" (buffer-name))
            9)))

  (let ((modeline-segment '(:eval (meomacs-window-numbering-modeline))))
    (unless (member modeline-segment mode-line-format)
      (setq-default mode-line-format (cons modeline-segment mode-line-format))))
#+end_src

** ace-window
#+begin_src emacs-lisp
  (straight-use-package 'ace-window)

  (autoload 'ace-swap-window "ace-window" nil t)
  (autoload 'ace-delete-window "ace-window" nil t)

  (keymap-set mode-specific-map "W" 'ace-swap-window)
  (keymap-set mode-specific-map "Q" 'ace-delete-window)
#+end_src

** winner-mode
#+begin_src emacs-lisp
  (require 'winner)

  (winner-mode 1)
#+end_src

* Workspace management

** COMMENT OTPP, one tab per project

#+begin_src emacs-lisp
  (straight-use-package 'otpp)

  (require 'otpp)
  (otpp-mode 1)
  (otpp-override-mode 1)
#+end_src

** COMMENT Using frames

Use frames for workspaces.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c j") 'select-frame-by-name)

  ;; Better to have title name with project name
  (setq-default frame-title-format
                '((:eval
                   (or (cdr (project-current))
                       (buffer-name)))))
#+end_src

** COMMENT Using tab-bar-mode

Use tabs for workspaces.

#+begin_src emacs-lisp
  ;; We could hide the window decoration
  (setq default-frame-alist '((undecorated . t)))

  (add-hook 'after-init-hook
            (lambda ()
              (tab-rename "*Emacs*")))

  (defun meomacs-format-tab (tab i)
    (let ((current-p (eq (car tab) 'current-tab)))
      (concat
       (propertize (concat
                    " "
                    (alist-get 'name tab)
                    " ")
                   'face
                   (funcall tab-bar-tab-face-function tab))
       " ")))

  (setq tab-bar-border nil
        tab-bar-close-button nil
        tab-bar-new-button (propertize " ðŸž¤ " 'display '(:height 2.0))
        tab-bar-back-button nil
        tab-bar-tab-name-format-function 'meomacs-format-tab
        tab-bar-tab-name-truncated-max 10)

  (tab-bar-mode 1)
#+end_src

Add missing keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x t .") 'tab-bar-rename-tab)
#+end_src

* Auto pairs

** Builtin electric pair

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
  (add-hook 'conf-mode-hook 'electric-pair-local-mode)
#+end_src

** COMMENT Smartparens

Use smartparens for auto pairs, toggle strict mode with =C-c t s=.

#+begin_src emacs-lisp
  (straight-use-package 'smartparens)

  (require 'smartparens)

  (add-hook 'prog-mode-hook 'smartparens-mode)
  (add-hook 'conf-mode-hook 'smartparens-mode)

  (setq sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil)

  (with-eval-after-load "smartparens"

    (keymap-set smartparens-mode-map "C-)" 'sp-forward-slurp-sexp)
    (keymap-set smartparens-mode-map "C-}" 'sp-forward-barf-sexp)

    ;; setup for emacs-lisp
    (sp-with-modes '(emacs-lisp-mode)
      (sp-local-pair "'" nil :actions nil))

    ;; Use strict-mode by default
    (add-hook 'smartparens-mode-hook 'smartparens-strict-mode)

    ;; Keybindings
    (keymap-set prog-mode-map "C-c t p" 'smartparens-strict-mode))
#+end_src

* Line numbers with display-line-numbers-mode

#+begin_src emacs-lisp
  (defun toggle-display-line-number-and-hl-line ()
    (interactive)
    (if (bound-and-true-p display-line-numbers-mode)
        (progn
          (display-line-numbers-mode -1)
          (hl-line-mode -1))
      (display-line-numbers-mode)
      (hl-line-mode)))
#+end_src

** Relative line number

#+begin_src emacs-lisp
  (setq display-line-numbers-type t)
#+end_src

* Completion for key sequence

** Which-key
#+begin_src emacs-lisp
  (straight-use-package 'which-key)
  (which-key-mode 1)

  (with-eval-after-load "which-key"
    (diminish 'which-key-mode))
#+end_src

* Minibuffer completion reading
** Vertico & Precient

- Vertico provides a better UX for completion reading.
- Use prescient to support fuzzy search

#+begin_src emacs-lisp
  (straight-use-package '(vertico :files (:defaults "extensions/*")))
  (straight-use-package 'prescient)
  (straight-use-package 'vertico-prescient)

  (require 'vertico)
  (require 'vertico-prescient)

  (vertico-mode 1)
  (vertico-prescient-mode 1)
  (prescient-persist-mode 1)
#+end_src

** COMMENT Selectrum & Precient

#+begin_src emacs-lisp
  (straight-use-package 'selectrum)
  (straight-use-package 'selectrum-prescient)

  (selectrum-mode 1)
  (selectrum-prescient-mode 1)
  (prescient-persist-mode 1)
#+end_src

** Fix M-DEL in minibuffer

Do "delete" instead of "kill" when pressing =M-DEL=.

#+begin_src emacs-lisp
  (defun meomacs-backward-delete-sexp ()
    "Backward delete sexp.

  Used in minibuffer, replace the the default kill behavior with M-DEL."
    (interactive)
    (save-restriction
      (narrow-to-region (minibuffer-prompt-end) (point-max))
      (delete-region
       (save-mark-and-excursion
         (backward-sexp)
         (point))
       (point))))

  (define-key minibuffer-local-map (kbd "M-DEL") #'meomacs-backward-delete-sexp)
#+end_src

* Completion at point

** Corfu
#+begin_src emacs-lisp
  (straight-use-package 'corfu)
  (straight-use-package 'cape)
  (straight-use-package 'kind-icon)

  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-max-width 100)
    (corfu-auto-delay 0.15)
    (corfu-auto-prefix 1)
    (corfu-preview-current nil)
    :hook (eshell-mode . (lambda () (setq-local corfu-auto nil)))
    :init
    (global-corfu-mode))

  (use-package corfu-popupinfo
    :config
    (corfu-popupinfo-mode)
    (setq corfu-popupinfo-delay (cons nil 1.0)))

  (use-package cape
    :after corfu
    :bind (("C-c p p" . completion-at-point)
           ("C-c p t" . complete-tag)
           ("C-c p d" . cape-dabbrev)
           ("C-c p f" . cape-file)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ;; ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p \\" . cape-tex)
           ("C-c p w" . cape-dict))
    :init
    (add-to-list 'completion-at-point-functions #'cape-file))

  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

#+end_src

** COMMENT Company

#+begin_src emacs-lisp
  (straight-use-package 'company)

  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'conf-mode-hook 'company-mode)
  (add-hook 'comint-mode-hook 'company-mode)
  (autoload 'company-mode "company" nil t)

  (setq company-format-margin-function 'company-text-icons-margin
        company-dabbrev-downcase nil
        company-idle-delay 0.1)

  (with-eval-after-load 'company
    (diminish 'company-mode))
#+end_src

A setup for vim-like behavior.  Completion will popup automatically, =SPC= and =RET= will do insertion even though the popup is available.

| action                      | key |
|-----------------------------+-----|
| trigger completion at point | M-n |
| previous candidate          | M-p |
| next candidate              | M-n |
| next template placeholder   | RET |

#+begin_src emacs-lisp
  (with-eval-after-load "company"
    (require 'company-tng)

    (add-hook 'company-mode-hook 'company-tng-mode)

    (keymap-set company-mode-map "M-n" 'company-complete-common)
    (keymap-set company-active-map "TAB" nil)
    (define-key company-active-map [tab] nil)
    (keymap-set company-active-map "C-n" nil)
    (keymap-set company-active-map "C-p" nil)
    (keymap-set company-active-map "M-n" 'company-select-next)
    (keymap-set company-active-map "M-p" 'company-select-previous)

    ;; Free SPC and RET, popup will no longer interrupt typing.
    (define-key company-active-map [escape] nil)
    (define-key company-active-map [return] nil)
    (keymap-set company-active-map "RET" nil)
    (keymap-set company-active-map "SPC" nil))
#+end_src

** COMMENT Company Box

#+begin_src emacs-lisp
  (straight-use-package 'company-box)

  (with-eval-after-load "company"
    (require 'company-box)
    (add-hook 'company-mode-hook 'company-box-mode))
#+end_src

** COMMENT Company posframe

#+begin_src emacs-lisp
  (straight-use-package 'company-posframe)

  (with-eval-after-load "company"
    (require 'company-posframe)
    (add-hook 'company-mode-hook 'company-posframe-mode))
#+end_src

* Templating

** yasnippet

Expand template with =TAB=. Jump between the placeholders with =TAB= and =S-TAB=.

#+begin_src emacs-lisp
  (straight-use-package 'yasnippet)
  (require 'yasnippet)
  (yas-global-mode 1)
  (diminish 'yas-minor-mode)

  (straight-use-package '(yasnippets
                          :repo "nicehiro/yasnippets"
                          :type git
                          :host github))
  (setq yas-snippet-dirs (list (expand-file-name "straight/repos/yasnippets" user-emacs-directory)))
#+end_src

* Project management

** project.el

To find files/buffers and apply commands on project, use builtin package ~project~.

#+begin_src emacs-lisp
  (setq project-switch-commands '((project-find-file "Find file")
                                  (project-find-regexp "Find regexp")
                                  (project-dired "Dired")
                                  (project-eshell "Eshell")
                                  (magit-project-status "Magit")
                                  (shell "Shell")))

  (defalias 'project-prefix-map project-prefix-map)

  (define-key mode-specific-map "p" 'project-prefix-map)

  (with-eval-after-load "project"
    (define-key project-prefix-map "s" 'shell)
    (define-key project-prefix-map "m" 'magit-project-status))
#+end_src

* File Navigator

** Dired sidebar

#+begin_src emacs-lisp
  (straight-use-package 'dired-sidebar)

  (autoload 'dired-sidebar-toggle-sidebar "dired-sidebar" nil t)
#+end_src

** COMMENT treemacs

#+begin_src emacs-lisp
  (straight-use-package 'treemacs)

  (setq treemacs-is-never-other-window t)

  (autoload 'treemacs "treemacs" nil t)
#+end_src

* Text searching

** COMMENT deadgrep

#+begin_src emacs-lisp
  (straight-use-package 'deadgrep)

  (require 'deadgrep)

  (define-key project-prefix-map "r" 'deadgrep)

  (with-eval-after-load "deadgrep"
    (keymap-set deadgrep-mode-map "e" 'deadgrep-edit-mode)
    (add-hook 'deadgrep-mode-hook 'next-error-follow-minor-mode))
#+end_src

** rg.el

#+begin_src emacs-lisp
  (straight-use-package 'rg)

  (autoload 'rg-project "wgrep" nil t)
  (autoload 'rg-project "rg" nil t)

  (with-eval-after-load "rg"
    (rg-enable-default-bindings)
    ;; (rg-enable-menu)
    )

  (with-eval-after-load "wgrep"
    (define-key wgrep-mode-map (kbd "C-c C-c") #'wgrep-finish-edit))

  (define-key project-prefix-map "r" 'rg-project)
#+end_src

* Wrap parentheses
#+begin_src emacs-lisp
  (setq meomacs-wrap-keymap
        (let ((map (make-keymap)))
          (suppress-keymap map)
          (dolist (k '("(" "[" "{" "<"))
            (define-key map k #'insert-pair))
          map))
#+end_src

* TUI Copy
#+begin_src emacs-lisp
  (defun ext-copy (text)
    (cond
     ((string-match-p ".*WSL2" operating-system-release)
      (let ((inhibit-message t)
            (coding-system-for-write 'gbk-dos))
        (with-temp-buffer
          (insert text)
          (call-process-region (point-min) (point-max) "clip.exe" nil 0))))

     ((not window-system)
      (let ((inhibit-message t))
        (with-temp-buffer
          (insert text)
          (call-process-region (point-min) (point-max) "wl-copy" nil 0))))))

  (unless window-system
    (setq interprogram-cut-function 'ext-copy))
#+end_src

* COMMENT Frame associated buffers

#+begin_src emacs-lisp
  (straight-use-package 'beframe)

  (require 'beframe)
  (beframe-mode 1)

  (setq beframe-functions-in-frames '(project-prompt-project-dir))

  (define-key global-map [remap switch-to-buffer] 'beframe-switch-buffer)
#+end_src

* Load variable values from varibale table

#+header: :var var-table=private.org:var-table
#+begin_src emacs-lisp
  (defun meomacs-read-var (key)
     (let* ((item (alist-get key var-table nil nil 'equal))
            (entry (cadr item))
            (where (car item)))
       (cond
        ((string-equal where "pass")
         (password-store-get entry))

        ((string-equal where "env")
         (getenv entry)))))
#+end_src

* Common settings for transient

#+begin_src emacs-lisp
  (straight-use-package 'transient)

  (with-eval-after-load "transient"
    (keymap-set transient-map "<escape>" 'transient-quit-one))
#+end_src

* Asynchronous Search

#+begin_src emacs-lisp
  (use-package consult
    :defer 0.5
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)
           ;; ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x r b" . consult-bookmark)
           ("C-x p b" . consult-project-buffer)
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)
           ("<help> a" . consult-apropos)
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history))
    :custom
    (register-preview-delay 0.5)
    (register-preview-function #'consult-register-format)
    (consult-narrow-key "<")
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    (consult-after-jump-hook '(recenter-on-top reveal-entry))
    :config
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))
    (advice-add #'register-preview :override #'consult-register-window)
    :preface
    (defun recenter-on-top ()
      "`recenter' on top"
      (interactive)
      (recenter 0))
    (defun reveal-entry ()
      "Reveal Org or Outline entry and recenter on top."
      (cond
       ((and (eq major-mode 'org-mode)
             (org-at-heading-p))
        (org-show-entry))
       ((and (or (eq major-mode 'outline-mode)
                 (bound-and-true-p outline-minor-mode))
             (outline-on-heading-p))
        (outline-show-entry)))))
#+end_src

* gptel

Configuration of ~gptel~ for daily LLM usage in Emacs.

#+begin_src emacs-lisp
  (straight-use-package 'gptel)

  (require 'subr-x)

  (defun my/openrouter-api-key ()
    "Return the OpenRouter API key stored in `~/Google Drive/My Drive/keys/OpenRouter/gptel.txt`.

  The file should contain only the key on a single line.
  Raises an error if the file canâ€™t be read or is empty."
    (let ((key-file (expand-file-name "~/Google Drive/My Drive/keys/OpenRouter/gptel.txt")))
      (unless (file-readable-p key-file)
        (error "Cannot read API key file: %s" key-file))
      (with-temp-buffer
        (insert-file-contents key-file)
        (let ((key (string-trim (buffer-string))))
          (unless (string-empty-p key)
            key)))))

  (use-package gptel
    :config
    ;; open router
    (gptel-make-openai "OpenRouter"
      :host "openrouter.ai"
      :endpoint "/api/v1/chat/completions"
      :stream t
      :key #'my/openrouter-api-key
      :models '(qwen/qwen2.5-vl-32b-instruct))
    ;; github copilot
    (gptel-make-gh-copilot "Copilot")
    ;; default backend
    (setq gptel-model 'gemini-2.5-pro
        gptel-backend (gptel-make-gh-copilot "Copilot"))
    )
#+end_src

* Default Application

Set default application to open PDFs.

#+begin_src emacs-lisp
  (defcustom pdf-external-viewer-app "Preview"
    "Default application to open PDF files on macOS.
  Common options: Preview, Adobe Acrobat Reader DC, Skim, PDF Expert"
    :type 'string
    :group 'pdf-external)

  (defun pdf-open-external (&optional file)
    "Open PDF file with external application on macOS.
  If FILE is not provided, prompt for file selection.
  Uses the application specified in `pdf-external-viewer-app'."
    (interactive)
    (let ((pdf-file (or file
                        (read-file-name "Select PDF file: " nil nil t nil
                                        (lambda (name)
                                          (string-match-p "\\.pdf\\'" name))))))
      (if (and pdf-file (file-exists-p pdf-file))
          (progn
            (start-process "pdf-external-viewer" nil
                           "open" "-a" pdf-external-viewer-app
                           (expand-file-name pdf-file))
            (message "Opening %s with %s" (file-name-nondirectory pdf-file) pdf-external-viewer-app))
        (error "File does not exist: %s" pdf-file))))

  (defun pdf-find-file-advice (orig-fun &rest args)
    "Advice to open PDF files externally when using find-file."
    (let ((filename (car args)))
      (if (and filename (string-match-p "\\.pdf\\'" filename))
          (progn
            (pdf-open-external filename)
            ;; Return a dummy buffer to satisfy find-file
            (get-buffer-create "*PDF opened externally*"))
        (apply orig-fun args))))

  (advice-add 'find-file :around #'pdf-find-file-advice)
#+end_src
